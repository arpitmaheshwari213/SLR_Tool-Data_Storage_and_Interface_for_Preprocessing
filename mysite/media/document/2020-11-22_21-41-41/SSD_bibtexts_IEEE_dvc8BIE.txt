@INPROCEEDINGS{8862251,
author={A. {Kumar} and S. P. {Panda}},
booktitle={2019 International Conference on Machine Learning, Big Data, Cloud and Parallel Computing (COMITCon)},
title={A Survey: How Python Pitches in IT-World},
year={2019},
volume={},
number={},
pages={248-251},
abstract={This paper lights on Python amongst other different programming paradigms used in the IT World, which enhances development speed. Although, Python was conceptualized in the late 1980s and after its implementation in 1989, it has emerged as a new multi-paradigm language platform with advent of Big Data. Python includes various data structures, standard libraries with the implementation of sentiment analysis and data science code. The real aim is to provide awareness to all the programmers about various facts of python language. It tells how Python works with various commercial and social communities and provides complete and desirable results. There are many areas and applications where Python makes its own stand as compared to other programming languages.},
keywords={Python;multiparadigm language platform;Big Data;data structures;sentiment analysis;data science code;programming paradigms;IT world;Python language;Python;Libraries;Sentiment analysis;Data structures;Machine learning;Programming;Python data structures;Python Applications;Python standard libraries.},
doi={10.1109/COMITCon.2019.8862251},
ISSN={},
month={Feb},}
@INPROCEEDINGS{8462463,
author={D. {Can} and V. R. {Martinez} and P. {Papadopoulos} and S. S. {Narayanan}},
booktitle={2018 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)},
title={Pykaldi: A Python Wrapper for Kaldi},
year={2018},
volume={},
number={},
pages={5889-5893},
abstract={We present PyKaldi, a free and open-source Python wrapper for the widely-used Kaldi speech recognition toolkit. PyKaldi is more than a collection of Python bindings into Kaldi libraries. It is an extensible scripting layer that allows users to work with Kaldi and OpenFst types interactively in Python. It tightly integrates Kaldi vector and matrix types with NumPy arrays. We believe Py Kaldi will significantly improve the user experience and simplify the integration of Kaldi into Python workflows. PyKaldi comes with extensive documentation and tests. It is released under the Apache License v2.0 with support for both Python 2.7 and 3.5+.},
keywords={authoring languages;public domain software;Python;speech recognition;extensible scripting layer;matrix types;Python workflows;Python 2;free source Python wrapper;open-source Python wrapper;Kaldi speech recognition toolkit;Kaldi libraries;Pykaldi;OpenFst types;Kaldi vector;NumPy arrays;Apache License v2.0;Python;C++ languages;Feature extraction;Libraries;Documentation;Mel frequency cepstral coefficient;Speech recognition;Speech Recognition;Kaldi;OpenFst;Python},
doi={10.1109/ICASSP.2018.8462463},
ISSN={2379-190X},
month={April},}
@INPROCEEDINGS{8952190,
author={L. {Yu}},
booktitle={2019 34th IEEE/ACM International Conference on Automated Software Engineering (ASE)},
title={Empirical Study of Python Call Graph},
year={2019},
volume={},
number={},
pages={1274-1276},
abstract={In recent years, the extensive application of the Python language has made its analysis work more and more valuable. Many static analysis algorithms need to rely on the construction of call graphs. In this paper, we did a comparative empirical analysis of several widely used Python static call graph tools both quantitatively and qualitatively. Experiments show that the existing Python static call graph tools have a large difference in the construction effectiveness, and there is still room for improvement.},
keywords={graph theory;program diagnostics;Python;software quality;user interfaces;comparative empirical analysis;construction effectiveness;extensive application;Python language;analysis work;static analysis algorithms;Python static call graph tools;Tools;Python;Software algorithms;Measurement;Conferences;Software engineering;Manuals;Python, call graph, empirical study, quantitative, qualitative},
doi={10.1109/ASE.2019.00160},
ISSN={2643-1572},
month={Nov},}
@INPROCEEDINGS{8506789,
author={F. {Liu} and Z. {Yang}},
booktitle={2018 International Conference on Advanced Mechatronic Systems (ICAMechS)},
title={Design of VMware vSphere Automatic Operation and Maintenance System Based on Python},
year={2018},
volume={},
number={},
pages={283-286},
abstract={A kind of automatic operation and maintenance system established on the basis of facing to objective programming language Python is proposed by analyzing the requirements during the operation and maintenance of VMware vSphere. It can complete VMware vSphere automatic operation and maintenance work correctly by utilizing high-efficient, smart, simple and so on feature of Python language, combining with powerful function provided by extension modules such as pysphere, pyVmomi and MySQLdb, and with API support provided by VMware. The result indicates that this system has high-efficiency, universality and expansibility. Because of its simple code, clear layer and short period, it also has wide application prospect by using VMware vSphere automatic operation and maintenance system developed by Python.},
keywords={application program interfaces;cloud computing;object-oriented languages;Python;software maintenance;virtual machines;objective programming language Python;VMware vSphere automatic operation;maintenance work;Python language;maintenance system;Virtual machining;Maintenance engineering;Cloud computing;Python;Virtualization;Servers;Data centers;Python;pyshpere;VMware vSphere;automatic operation and maintenance},
doi={10.1109/ICAMechS.2018.8506789},
ISSN={2325-0690},
month={Aug},}
@INPROCEEDINGS{8845524,
author={X. {Liu} and H. {Xu}},
booktitle={2019 14th International Conference on Computer Science Education (ICCSE)},
title={School-Enterprise Cooperation on Python Data Analysis Teaching},
year={2019},
volume={},
number={},
pages={278-281},
abstract={To meet the needs of enterprises for data analysis talents, school-enterprise cooperative course Python Data Analysis introduces the basic theories and methods for data analysis by using Python programming language. The teaching content is organized around practical cases designed according to the actual demand of the enterprise. Exploratory teaching method is conducted to cultivate the communication, collaboration, critical thinking and creativity ability of students. Students fully participate in the teaching process by discussing, analyzing and programming the cases. The implementation scheme, organization of exploratory teaching and the design of teaching cases are introduced in this paper.},
keywords={computer aided instruction;computer science education;data analysis;educational courses;educational institutions;Python;teaching;Python programming language;critical thinking;creativity ability;teaching process;school-enterprise cooperative course Python data analysis teaching;Education;Python;Data analysis;Libraries;Programming profession;Data visualization;School-enterprise cooperation;Python;data analysis;exploratory teaching},
doi={10.1109/ICCSE.2019.8845524},
ISSN={2473-9464},
month={Aug},}
@INPROCEEDINGS{8866961,
author={Y. {Hwang} and D. {Choi} and H. {An} and S. {Shin} and C. G. {Lee}},
booktitle={2019 International Conference on Green and Human Information Technology (ICGHIT)},
title={Development of Python-MATLAB Interface Program for Optical Communication System Simulation},
year={2019},
volume={},
number={},
pages={46-48},
abstract={This paper reports on the results of a developing Python-MATLAB interface program to implement optical wireless communication system simulation. We implement Python interface for entering input values and simulation environment variables for MATLAB. We operate MATLAB to numerical computing process about communication system simulation to generate a signal, to approximate channel characteristics and to recover the signal. Python passes input data and environment variables to MATLAB and displays output data and graphs from the simulation after MATLAB numerical computing.},
keywords={free-space optical communication;Matlab;Python;telecommunication computing;optical wireless communication system simulation;simulation environment variables;numerical computing process;MATLAB numerical computing;Python-MATLAB interface program;Matlab;Optical filters;Python;Optical fiber communication;Wireless communication;Numerical models;Optical fibers;Simulation;optical communication;MATLAB;Python},
doi={10.1109/ICGHIT.2019.00018},
ISSN={},
month={Jan},}
@INPROCEEDINGS{9075799,
author={S. {Zhou} and Z. {He} and N. {Xiong} and X. {Liu}},
booktitle={2019 2nd International Conference on Information Systems and Computer Aided Education (ICISCAE)},
title={Research and Application of Mixed Teaching Method of Python Programming Based on SPOC},
year={2019},
volume={},
number={},
pages={189-193},
abstract={With the development of information technology and the industry information literacy is a must-have skill for everyone. At present, most colleges and universities choose Python as a carrier to carry out programming teaching for non-computer majors. Firstly, we analyzed the current status of Python programming teaching in universities. Secondly, considering the different needs of different majors for course learning, we re-extracted course content, design and build a SPOC teaching platform for course [1]. Lastly, we design a mixed teaching method, combining classroom teaching with online teaching [2]. Our experiment demonstrates that the proposed mixed teaching method can greatly improve students' learning efficiency.},
keywords={computer aided instruction;computer science education;educational courses;educational institutions;Python;teaching;SPOC teaching platform;mixed teaching method;classroom teaching;online teaching;information technology;industry information literacy;universities;noncomputer majors;Python programming teaching;course learning;students learning efficiency;small private online course;Education;Python;Programming profession;Videos;Correlation;Libraries;Information literacy;Python programming;SPOC;mixed teaching method},
doi={10.1109/ICISCAE48440.2019.221615},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{9066334,
author={T. {Naumovic} and M. {Despotovic-Zrakic} and B. {Radenkovic} and L. {Zivojinovic} and I. {Jezdovic}},
booktitle={2020 19th International Symposium INFOTEH-JAHORINA (INFOTEH)},
title={Development of a Continuous System Simulation Engine in Python Programing Language},
year={2020},
volume={},
number={},
pages={1-5},
abstract={This paper portrays the development of an simulation engine in Python programming language with focus on the continuous system simulation. Features of the engine are based on CSMP block-oriented language and software for continuous system simulation. The aim of the paper is threefold. Firstly, the paper describes the need and usage of such engine. Second goal is to analyze Python concepts used for the implementation of the simulation engine - API development, communication with smart systems, real-time data processing, integration of differential equations, threading and parallel programming. And last, this paper will depict the engine architecture, use cases and usage of the analyzed concepts in the development process. In the conclusion, we will discuss the overall outcome and the course of the future improvements and upgrades of the engine.},
keywords={application program interfaces;object-oriented programming;parallel programming;Python;Python programming language;API development;smart systems;parallel programming;continuous system simulation engine;engine architecture;CSMP block-oriented language;Engines;Computational modeling;Mathematical model;Continuous time systems;Python;Unified modeling language;continuous system simulation;python;engine;smart systems;IoT},
doi={10.1109/INFOTEH48170.2020.9066334},
ISSN={},
month={March},}
@INPROCEEDINGS{8534636,
author={G. {Psathas} and P. {Chalki} and S. {Demetriadis} and A. {Tsiara}},
booktitle={2018 Learning With MOOCS (LWMOOCS)},
title={Profiles and Motivations of Participants in Greek MOOC for Python Programming},
year={2018},
volume={},
number={},
pages={70-73},
abstract={This paper presents data about learners' preferences, background and learning behavior in “Introduction to programming with Python” MOOC, offered in Autumn 2017. After the 6-week duration of the course, data collected through questionnaire and the MOOC's platform log files. The results showed that learners taking part in such MOOCs hold at least a Bachelor's or a Master's degree, and their age is between 26 and 45. The course's certificate acts as a motivational factor for learners to finish the course, and also as participation in activities forecast. It has also been observed that the most prominent reason for learners to participate in the MOOC was their current or future working career development.},
keywords={certification;computer aided instruction;computer science education;continuing professional development;educational courses;human resource management;Python;Python programming;motivational factor;greek MOOC;Masters degree;working career development;learners preferences;Python;Programming profession;Informatics;Certification;Massive Open Online Courses;MOOCs;Python;Programming},
doi={10.1109/LWMOOCS.2018.8534636},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{9016774,
author={P. {Dinesh Divsekar} and R. {Porob} and P. S. {Kuwelkar}},
booktitle={2019 4th International Conference on Recent Trends on Electronics, Information, Communication Technology (RTEICT)},
title={Automated Regression Testing and Data Analytics using Python},
year={2019},
volume={},
number={},
pages={95-99},
abstract={Testing is of utmost importance in industrial domain. Product testing makes sure that, software performs the dedicated task error free. Product testing is the key prerequisite before releasing the product. In order to satisfy the customer's requirements, it is essential to experiment the device against different test conditions. The key idea behind performing regression testing is to check for any recent script changes have not adversely affected the existing functionalities of the device. Data analytics using python is performed to draw necessary conclusions based on the type of test conducted. The aim of this paper is to perform automated regression testing and reusing the existing scripts with new modifications. Data analytics is being carried out on error data to visualize accuracy, deviations and other parameters.},
keywords={data analysis;program testing;Python;regression analysis;error data;automated regression testing;dedicated task error;product testing;industrial domain;python;data analytics;Testing;Performance evaluation;Data analysis;Data visualization;Python;Temperature distribution;Hardware;Regression testing;Python scripts;DUT;Data Analytics;Excel Results},
doi={10.1109/RTEICT46194.2019.9016774},
ISSN={},
month={May},}
@INPROCEEDINGS{9140844,
author={F. {Rigueira} and J. {Bernardino} and I. {Pedrosa}},
booktitle={2020 15th Iberian Conference on Information Systems and Technologies (CISTI)},
title={Extraction of information from log files Using Python Programming and Tableau},
year={2020},
volume={},
number={},
pages={1-7},
abstract={Application servers generate daily log files with a significant part of their activity. This information is recorded sequentially over time but mixes various types of information. The absence of a standard for formatting the data record and the respective volume, make it difficult to extract the corresponding information. The lack of work, specifically in the treatment of SOA server log files, did not allow the comparisson with pre-existing Key Performance Indicators (KPI) or a set of best practices that could be followed. This work results in a description of the process that can serve as a guide for: definition of a logging structure; construction of a data extraction process; definition of a data structure to support the extracted information; definition of control metrics; definition of analysis and control processes for the extracted data.. Given the size of the files and the diversity of types of information that existed, it was necessary to use Python programming for data extraction and pre-treatment, Excel for data pre-treatment, Tableau for statistical treatment and presentation of results.},
keywords={data mining;data structures;file servers;Python;Tableau;Python programming;application servers;log files;data extraction process;data structure;control metrics;control processes;data pretreatment;information extraction;Service-oriented architecture;Python;Data mining;Process control;Information systems;Programming;Business;Log files;Key Performance Indicators;KPIs;Python;Tableau},
doi={10.23919/CISTI49556.2020.9140844},
ISSN={2166-0727},
month={June},}
@INPROCEEDINGS{8776620,
author={P. {Prashant} and A. {Tickoo} and S. {Sharma} and J. {Jamil}},
booktitle={2019 9th International Conference on Cloud Computing, Data Science Engineering (Confluence)},
title={Optimization of cost to calculate the release time in software reliability using python},
year={2019},
volume={},
number={},
pages={471-474},
abstract={As the competition among softwares have been increasing day by day, it made the IT sector to grow at different level. Whenever a software product comes into the market, a list of factors begin to originate and demand for changes. Hence there can arise defects in the software and so defects needed to be repaired. Also sales and demands of softwares are increasing day by day . So it becomes difficult to decide which software will be appropriate for the customer. As competitors are adding features and functions everyday to evolve technology that requires new upgrades to support latest versions of software. In order to maintain these new features, to win over prospects , testing is required to be done. Testing can be seen for technical case, business case, and economical case and especially for the reliability estimation.The prediction of faults in the software is another term in case of determining the outcome of the software product and the certain number of testing will be needed. Software reliability models techniques are employed for the perfect optimization on its release time. This research gives the idea of using both original release time and predicted release time to be executed and hence to obtain an optimized cost for release time. This will help to decide the effective cost of reliability of the software. Further going, this will help the customer to have the better selection on choosing the effective software. Thus through the python we have optimized the cost and found the release time of software to decide that this software will give the better output.},
keywords={estimation theory;optimisation;program testing;Python;software product lines;software reliability;software reliability models techniques;software product;reliability estimation;release time;cost optimization;Python;Software reliability;Testing;Python;Programming;Mathematical model;Software Reliability;Goel-Okumoto model;Python;Pyomo},
doi={10.1109/CONFLUENCE.2019.8776620},
ISSN={},
month={Jan},}
@INPROCEEDINGS{9094996,
author={X. {Li} and Z. {Wang}},
booktitle={2019 3rd International Conference on Electronic Information Technology and Computer Engineering (EITCE)},
title={Design of King Glory’s Game Query System Based on Python},
year={2019},
volume={},
number={},
pages={465-468},
abstract={The King Glory is a multiplayer tower defense sports game. This paper is based on Python to implement a game hero information query system. First, the crawler technology is used to get the hero information from the webpage, then the layered architecture is used to develop the software system and experiment on two computers. The user selects the specified hero name in the client interface to get the hero's title and skill information. The experimental results show that the system can query the details of the hero skills in the game.},
keywords={computer games;Internet;mobile computing;Python;query processing;Python;multiplayer tower defense sports game;game hero information query system;crawler technology;King Glory's game query system;Games;XML;Python;Databases;Servers;Computer architecture;King Glory;Information Query System;Python Language},
doi={10.1109/EITCE47263.2019.9094996},
ISSN={},
month={Oct},}
@INPROCEEDINGS{9034617,
author={W. {Jordan} and A. {Bejo} and A. G. {Persada}},
booktitle={2019 International Seminar on Research of Information Technology and Intelligent Systems (ISRITI)},
title={The Development of Lexer and Parser as Parts of Compiler for GAMA32 Processor’s Instruction-set using Python},
year={2019},
volume={},
number={},
pages={450-455},
abstract={At this time, there are many products based on embedded systems, each of these products requires an embedded processor. This results in high demand for embedded processors. Therefore, we need a tool that is able to design an embedded processor completely with its software development tool. One of the embedded processor that is developed is GAMA32 processor. GAMA32 processor is a 32-bit embedded processor designed using System C Model. Its processor architecture is General Purpose Processor (GPP). GAMA32 processor has its own software development tool, but it has no compiler. The most common used compiler is open source compiler like GNU Compiler Collection (GCC) and Low Level Virtual Machine (LLVM). However, this two open source compilers are not compatible with GAMA32 processor because their complexity. In this research, a simple and flexible compiler will be developed, especially the Abstract Syntax Tree (AST) generator part using Python library rPLY and the AST's output is in the format of JavaScript Object Notation (JSON). For testing the result of AST generator, 5 statement patterns are used namely if, if-else, while, do-while, and for patterns with initial value, and data type declaration as well. The test results show that the correct AST can be produced from the patterns used.},
keywords={authoring languages;embedded systems;instruction sets;microprocessor chips;program compilers;Python;software engineering;virtual machines;open source compiler;embedded systems;software development tool;processor architecture;general purpose processor;GAMA32 processor instruction-set;System C Model;GPP;GNU compiler collection;GCC;low level virtual machine;LLVM;abstract syntax tree generator;AST;JavaScript Object Notation;JSON;Python library rPLY;parser;lexer;Generators;Syntactics;Program processors;Python;Libraries;Grammar;embedded processor;GAMA32;AST generator;Python;JSON},
doi={10.1109/ISRITI48646.2019.9034617},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8712177,
author={I. {Grout}},
booktitle={2018 International Electrical Engineering Congress (iEECON)},
title={Pulse-Frequency Modulation Signal Generation for Programmable Logic Using Python and VHDL},
year={2018},
volume={},
number={},
pages={1-4},
abstract={In this paper, the design and development of a pulse-frequency modulation (PFM) signal generator circuit toolbox targeting the programmable logic device (PLD) is presented. PFM is signal encoding scheme that realizes an analog signal level as a digital bit-stream where the bit-stream frequency is proportional to the analog signal level. It is analogous to pulsewidth modulation (PWM). A Python script is run which sets-up a project and the analog signal to encode into PFM. The user can then generate a PFM signal generator circuit description in VHDL for implementation within a field programmable gate array (FPGA) or complex programmable logic device (CPLD). In this paper, the Xilinx Cool runner-II CPLD is chosen as the target device into which the VHDL circuit description can be synthesized and configured into the CPLD. In addition, a MATLAB script is generated to allow for analysis in MATLAB and a SPICE netlist is generated for analog circuit simulation.},
keywords={hardware description languages;programmable logic devices;pulse frequency modulation;Python;signal generators;SPICE;PFM signal generator circuit;pulse-frequency modulation signal generator circuit toolbox;VHDL;programmable logic device;Python;analog circuit simulation;Xilinx Cool runner-II CPLD;bit-stream frequency;digital bit-stream;analog signal level;signal encoding scheme;pulse-frequency modulation signal generation;Low pass filters;Hardware;Pulse width modulation;Clocks;Matlab;Python;pulse-frequency modulation;Python;PLD;VHDL},
doi={10.1109/IEECON.2018.8712177},
ISSN={},
month={March},}
@INPROCEEDINGS{9114760,
author={G. {Alvarado} and G. {Kukán}},
booktitle={2019 4th International Conference on Electrical, Electronics, Communication, Computer Technologies and Optimization Techniques (ICEECCOT)},
title={Hearth Detection System Using Coherence Function on python for Tachycardia and Bradycardia},
year={2019},
volume={},
number={},
pages={18-22},
abstract={When we see a heart problem the response time is crucial for a secure diagnostic. [1] In a previous work a functional prototype was made that allows to determine if a person has tachycardia or bradycardia as an existing pathology. The work was done using MATLAB software; however, this software is licensed and difficult to access since it is not free source. Under this limitation the prototype was reformulated in an open language known as PYTHON. The objective is to be able to achieve the same results as with the previous prototype without affecting the diagnosis. Based on this, a system was developed that diagnoses tachycardia and bradycardia with free software. Pathology detection is performed using a developed algorithm that mixes 3 comparison methods, such as cross spectrum. MSC and coherence. Upon capturing the ECG signal from the patient, the signal enters a DSP that uses these methods and will compare the entry ECG signal with a database created that contains all the possible existing signals according to the medical parameters corresponding to tachycardia and bradycardia. Resulting in a reliable diagnosis.},
keywords={electrocardiography;Matlab;medical signal detection;medical signal processing;Python;hearth detection system;coherence function;heart problem;response time;functional prototype;MATLAB software;free source;open language;PYTHON;bradycardia;free software;pathology detection;entry ECG signal;tachycardia diagnosis;Electrocardiography;Prototypes;Matlab;Coherence;Databases;Python;Real-time systems;Sinus tachycardia;Sinus bradycardia;Coherence function;MSC;Cross spectrum;ECG signal;Python;free OS;Raspberry Pi3;Olimexino},
doi={10.1109/ICEECCOT46775.2019.9114760},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8468860,
author={Z. {Guanghui} and L. {Yanjun} and T. {Yixiao} and W. {Zhaoxia} and Z. {Chengming}},
booktitle={2018 13th International Conference on Computer Science Education (ICCSE)},
title={Case-Based Teaching Organization for Python Programming that Focuses on Skill Training},
year={2018},
volume={},
number={},
pages={1-5},
abstract={In this paper, the method of Axis Flip was used in the teaching of Python programming. The focus of teaching is shift from coding knowledge to programming skills. After all, it is not how much of knowledge that you have learnt, but whether you grasp the programming skills that counts. In our teaching practice, a series of interesting cases has been designed. Programming courses has been well combined with their professional applications compared with the effect of traditional teaching method. Students' programming capability has been significantly improved, and they basically developed the skills to solve complex professional problems.},
keywords={computer based training;computer science education;educational courses;programming;Python;teaching;Axis Flip;python programming;programming skills;teaching practice;programming courses;skill training;teaching method;Case-based teaching organization;Programming profession;Python;Training;Organizations;Case-based Teaching;Python Programming;Skill Training;Axis Flip Teaching Method},
doi={10.1109/ICCSE.2018.8468860},
ISSN={2473-9464},
month={Aug},}
@INPROCEEDINGS{8858811,
author={J. {Alcalá-Fdez} and J. M. {Alonso} and C. {Castiello} and C. {Mencar} and J. M. {Soto-Hidalgo}},
booktitle={2019 IEEE International Conference on Fuzzy Systems (FUZZ-IEEE)},
title={Py4JFML: A Python wrapper for using the IEEE Std 1855-2016 through JFML},
year={2019},
volume={},
number={},
pages={1-6},
abstract={JFML is an open source Java library aimed at facilitating interoperability of fuzzy systems by implementing the IEEE Std 1855-2016 - the IEEE Standard for Fuzzy Markup Language (FML) that is sponsored by the IEEE Computational Intelligence Society. We developed a Python wrapper for JFML that enables to use all the functionalities of JFML through a Python 3.x module. The bridge between Python and Java is accomplished through the use of the Py4J framework. As a result, the possibility of using the IEEE standard for representing fuzzy systems is enlarged to a wider community of developers and knowledge engineers, with minimal code redundancy. Experiments show full interoperability between Python programs and JFML without any tangible overhead. We illustrate the use of Py4JFML in a beer style classification case study.},
keywords={fuzzy systems;IEEE standards;Java;open systems;public domain software;Python;software libraries;Py4JFML;Python wrapper;IEEE Std 1855-2016;open source Java library;fuzzy systems;Fuzzy Markup Language;Python 3.x module;Py4J framework;IEEE standard;Python programs;minimal code redundancy;interoperability;beer style classification;Python;Java;Servers;Libraries;Logic gates;IEEE Standards},
doi={10.1109/FUZZ-IEEE.2019.8858811},
ISSN={1558-4739},
month={June},}
@INPROCEEDINGS{8947654,
author={J. {Tait} and T. {Ripke} and L. {Roger} and T. {Matsuo}},
booktitle={2018 International Conference on Computational Science and Computational Intelligence (CSCI)},
title={Comparing Python and C++ Efficiency Through Sorting},
year={2018},
volume={},
number={},
pages={864-871},
abstract={Programming languages are vital components of the computer industry in the world today. There are many different programming languages which do not address which language performs the best and more efficiency than the other programming languages. In this paper we present a couple of different algorithms which we tested with a couple of different programming languages. This helps us out by a functional standpoint on which language is the better one. We report the results of the experiment by comparing the results that we have gotten from each of the programming languages. Our results show which programming language is the better suited for each of the algorithms that we tested.},
keywords={C++ language;Java;Python;sorting;programming language;computer industry;functional standpoint;C++ efficiency;Python;sorting;Python;Arrays;C++ languages;Encyclopedias;Electronic publishing;efficiency, complexity, sorting, python, C++},
doi={10.1109/CSCI46756.2018.00172},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8457637,
author={S. {Skalicky} and J. {Monson} and A. {Schmidt} and M. {French}},
booktitle={2018 IEEE 26th Annual International Symposium on Field-Programmable Custom Computing Machines (FCCM)},
title={Hot Spicy: Improving Productivity with Python and HLS for FPGAs},
year={2018},
volume={},
number={},
pages={85-92},
abstract={We present Hot & Spicy an open-source infrastructure and tool suite for integrating FPGA accelerators in Python applications, provided entirely as Python source code and available at https://spicy.isi.edu. This suite of tools eases the packaging, integration, and binding of accelerators and their C/C++ based drivers callable from a Python application. The Hot & Spicy tools can: (1) translate Python functions to HLS-suitable C functions, (2) generate Python C wrapper bindings, (3) automate the FPGA EDA tool flow, and (4) retarget Python source code to use accelerated libraries. For FPGA experts, this enables increased productivity and supports research on each stage of the flow by providing a framework to integrate additional compilers and optimizations. For everyone else this enables fast, consistent, acceleration of applications on FPGAs. We describe the design principles and flows for supporting high-level Python abstractions in an FPGA development flow. Then we evaluate the overheads of calling C/C++ routines from Python. Lastly, we show the results of accelerating a kernel in a Python image processing application and achieve a 39,137× speedup over the original Python implementation, and 6× speedup over an high-performance, hand-optimized OpenCV library implementation.},
keywords={field programmable gate arrays;image processing;Python;open-source infrastructure;tool suite;Python functions;HLS-suitable C functions;FPGA EDA tool flow;FPGA experts;high-level Python abstractions;FPGA development flow;Python image processing application;productivity;FPGA accelerators;Python source code;Hot Spicy tools;Python implementation;C++ based drivers;Python C wrapper bindings;compilers;optimizations;hand-optimized OpenCV library implementation;Tools;Python;Field programmable gate arrays;Acceleration;Hardware design languages;Syntactics;Hardware;Python;HLS;SDSoC;Pynq},
doi={10.1109/FCCM.2018.00022},
ISSN={2576-2621},
month={April},}
@INPROCEEDINGS{8170118,
author={B. A. {Malloy} and J. F. {Power}},
booktitle={2017 ACM/IEEE International Symposium on Empirical Software Engineering and Measurement (ESEM)},
title={Quantifying the Transition from Python 2 to 3: An Empirical Study of Python Applications},
year={2017},
volume={},
number={},
pages={314-323},
abstract={Background: Python is one of the most popular modern programming languages. In 2008 its authors introduced a new version of the language, Python 3.0, that was not backward compatible with Python 2, initiating a transitional phase for Python software developers. Aims: The study described in this paper investigates the degree to which Python software developers are making the transition from Python 2 to Python 3. Method: We have developed a Python compliance analyser, PyComply, and have assembled a large corpus of Python applications. We use PyComply to measure and quantify the degree to which Python 3 features are being used, as well as the rate and context of their adoption. Results: In fact, Python software developers are not exploiting the new features and advantages of Python 3, but rather are choosing to retain backward compatibility with Python 2. Conclusions: Python developers are confining themselves to a language subset, governed by the diminishing intersection of Python 2, which is not under development, and Python 3, which is under development with new features being introduced as the language continues to evolve.},
keywords={high level languages;software engineering;Python software developers;Python 2;Python applications;Python 3 features;programming languages;Python compliance analyser;Computer languages;Grammar;Tools;Syntactics;Software;Convergence;Semantics;Python;programming language evolution;language features},
doi={10.1109/ESEM.2017.45},
ISSN={},
month={Nov},}
@INPROCEEDINGS{8816757,
author={S. {Biswas} and M. J. {Islam} and Y. {Huang} and H. {Rajan}},
booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)},
title={Boa Meets Python: A Boa Dataset of Data Science Software in Python Language},
year={2019},
volume={},
number={},
pages={577-581},
abstract={The popularity of Python programming language has surged in recent years due to its increasing usage in Data Science. The availability of Python repositories in Github presents an opportunity for mining software repository research, e.g., suggesting the best practices in developing Data Science applications, identifying bug-patterns, recommending code enhancements, etc. To enable this research, we have created a new dataset that includes 1,558 mature Github projects that develop Python software for Data Science tasks. By analyzing the metadata and code, we have included the projects in our dataset which use a diverse set of machine learning libraries and managed by a variety of users and organizations. The dataset is made publicly available through Boa infrastructure both as a collection of raw projects as well as in a processed form that could be used for performing large scale analysis using Boa language. We also present two initial applications to demonstrate the potential of the dataset that could be leveraged by the community.},
keywords={data analysis;data mining;learning (artificial intelligence);meta data;program debugging;public domain software;Python;boa dataset;data science software;Python programming language;Python repositories;Data Science applications;bug-patterns;code enhancements;Python software;Data Science tasks;metadata;machine learning libraries;Boa infrastructure;raw projects;Boa language;Github projects;Python;Data science;Libraries;Metadata;Machine learning;Data mining;MSR;Boa;AST;machine learning;data science;open source repositories;program analysis},
doi={10.1109/MSR.2019.00086},
ISSN={2574-3864},
month={May},}
@INPROCEEDINGS{8781432,
author={C. D. {López} and M. {Cvetković} and P. {Palensky}},
booktitle={2019 IEEE 28th International Symposium on Industrial Electronics (ISIE)},
title={Enhancing PowerFactory Dynamic Models with Python for Rapid Prototyping},
year={2019},
volume={},
number={},
pages={93-99},
abstract={DIgSILENT PowerFactory is among the most widely adopted power system analysis tools in research and industry. It provides a comprehensive library of device models and it allows users to define their own. Models for dynamic simulation can be defined in the DIgSILENT Simulation Language (DSL). When the functionality of DSL is insufficient, new DSL functions can be defined in C or C++. However, C and C++ can be challenging for inexperienced programmers. Furthermore, every time the C or C++ code is modified, it needs to be recompiled and PowerFactory needs to be restarted for the changes to take effect, which slows down the workflow, model development, and inhibits rapid prototyping. In this paper we present an open source library that allows users to call Python functions and methods from DSL with minimal effort. Python is a powerful and much easier to use language than C or C++. Additionally, Python programs do not need to be compiled. Furthermore, with this library PowerFactory does not need to be restarted every time the Python code is changed. To illustrate what can be accomplished with our library we present three example use cases related to load modeling, co-simulation, and fault detection based on machine learning. The examples show that it becomes straightforward to enhance DSL with Python and that sophisticated models can be produced with reduced effort using popular open source Python libraries. As a consequence, PowerFactory users gain access to enhanced modeling capabilities and user-friendliness, and a more speedy workflow, which is beneficial for rapid prototyping.},
keywords={fault diagnosis;learning (artificial intelligence);power engineering computing;power system analysis computing;power system simulation;public domain software;Python;simulation languages;software libraries;device models;dynamic simulation;DIgSILENT Simulation Language;DSL functions;model development;rapid prototyping;open source library;Python functions;Python programs;Python code;load modeling;PowerFactory users;user-friendliness;PowerFactory dynamic models;DIgSILENT PowerFactory;PowerFactory;open source Python libraries;power system analysis tools;C;C++;DSL;Python;Libraries;Load modeling;C++ languages;Power system dynamics;Rapid prototyping;Co-simulation;DSL;dynamic simulation;machine-learning;PowerFactory;Python},
doi={10.1109/ISIE.2019.8781432},
ISSN={2163-5145},
month={June},}
@INPROCEEDINGS{8479617,
author={M. {Swain} and S. {Dhariwal} and G. {Kumar}},
booktitle={2018 International Conference on Intelligent Circuits and Systems (ICICS)},
title={A Python (Open CV) Based Automatic Tool for Parasitemia Calcuation in Peripheral Blood Smear},
year={2018},
volume={},
number={},
pages={445-448},
abstract={Malaria represent a serious public health problem of humans and animals worldwide. Malaria is endemic in more than 100 countries while majority of the cases occurs in tropic countries. Estimation of parasitemia (in stained blood smears) is an important parameter in malaria diagnosis and malaria research, however is being perform manually since binging, which is a time consuming method. In contrast this study proposes a Python (Open CV) bases image processing tool for easy, user friendly, accurate and cost effective calculation of parasitemia. During this process, initially the malaria positive blood smear image was acquired and a Python Code for Image Processing was developed which includes image decomposition, cell size estimation, morphological transformation and parasitemia calculation. Proposed tool resulted in 7.42% of parasitemia which in contrast to manual calculation (6.42% parasitemia), 90.00% accurate. Based on the above observations it can be concluded that the Python based image processing tool is a very effective approach of rapid calculation of parasitemia.},
keywords={biomedical optical imaging;blood;cellular biophysics;diseases;filtering theory;image classification;image colour analysis;image processing;image segmentation;medical image processing;patient diagnosis;Python based image processing tool;manual calculation;cell size estimation;image decomposition;Python Code;malaria positive blood smear image;cost effective calculation;Python bases image processing tool;malaria diagnosis;stained blood smears;tropic countries;serious public health problem;peripheral blood smear;parasitemia calcuation;automatic tool;Open CV;Diseases;Tools;Blood;Image processing;Estimation;Manuals;Python;Python;Parasitemia;Open CV},
doi={10.1109/ICICS.2018.00096},
ISSN={},
month={April},}
@INPROCEEDINGS{8789108,
author={X. {Zhang} and D. {Zhang}},
booktitle={2017 International Conference on Computer Technology, Electronics and Communication (ICCTEC)},
title={Research on Encryption Algorithm Based on Python},
year={2017},
volume={},
number={},
pages={586-588},
abstract={With the rise of Python language in these years, more and more developers start to use Python language to do researches. Python language has its own advantage on Encryption algorithm. This paper discusses the principles of Caesar Cipher, Simple Substitution Cipher and Vigenere Cipher and their operating process based on Python, then concludes the characteristics and disadvantages of these Encryption algorithms from security and efficiency. It points out their applicable range, and in the end, forecasts the future of the Encryption algorithm based on Python.},
keywords={cryptography;Python;encryption algorithm;Python language;Caesar Cipher;Vigenere Cipher;simple substitution cipher;operating process;Ciphers;Encryption;Python;Nonlinear optics;Optical imaging;Encryption algorithm;Caesar Cipher;Simple Substitution Cipher;Vigenere Cipher},
doi={10.1109/ICCTEC.2017.00132},
ISSN={},
month={Dec},}
@INPROCEEDINGS{8609808,
author={C. {Sotomayor-Beltran} and G. W. Z. {Segura} and A. {Roman-Gonzalez}},
booktitle={2018 IEEE International Conference on Automation/XXIII Congress of the Chilean Association of Automatic Control (ICA-ACCA)},
title={Why should Python be a compulsory introductory programming course in Lima (Peru) universities?},
year={2018},
volume={},
number={},
pages={1-4},
abstract={Python is a computer programming language being widely used in the developed world for a diversity of applications. Extensively used in scientific research and spanning areas like finance and biomedicine, Python is making a breakthrough in many professions. Worldwide rankings from popularity in programming languages and also our own show that Python is among the three most preferred ones around the world. A case is then presented to urgently introduce Python as a core introductory programming language in the curricula of the computer science departments in the universities of Lima, Peru, for starters. We also discuss an introductory methodology in programming with Python in order to make a better impact of what this programming language is capable of.},
keywords={computer science education;educational courses;Python;Python;computer programming language;scientific research;spanning areas;core introductory programming language;Peru;compulsory introductory programming course;Lima universities;Python;Programming profession;Libraries;Java;universities;computer science education;programming},
doi={10.1109/ICA-ACCA.2018.8609808},
ISSN={},
month={Oct},}
@INPROCEEDINGS{8901656,
author={M. R. {Mufid} and A. {Basofi} and M. U. H. {Al Rasyid} and I. F. {Rochimansyah} and A. {rokhim}},
booktitle={2019 International Electronics Symposium (IES)},
title={Design an MVC Model using Python for Flask Framework Development},
year={2019},
volume={},
number={},
pages={214-219},
abstract={The Model-View-Controller (MVC) framework has become the standard in modern software development, with the model layer, display layer, and controller layer making it easier and faster. The Flask is a framework that uses Python language with easy to understand code writing. But the Flask framework still doesn't use the MVC method, so files and codes are not regular. The purpose of this study was to design a MVC for a framework that uses the Python programming language. This system has a generator that can make MVC folder structure easily and quickly, this system is also equipped with the Bootstrap framework, and this system is open source. The results showed that the presence of MVC on the flask framework could make users easier in creating new projects and have faster fully load time.},
keywords={Internet;Java;program compilers;Python;software engineering;statistical analysis;MVC Model;Flask framework development;Model-View-Controller framework;modern software development;model layer;display layer;controller layer;Python language;code writing;MVC method;Python programming language;MVC folder structure;Bootstrap framework;Framework;Model-View-Controller (MVC);Python;genarator},
doi={10.1109/ELECSYM.2019.8901656},
ISSN={},
month={Sep.},}
@INPROCEEDINGS{8810949,
author={S. {Khan} and A. {Latif}},
booktitle={2019 IEEE Milan PowerTech},
title={Python based scenario design and parallel simulation method for transient rotor angle stability assessment in PowerFactory},
year={2019},
volume={},
number={},
pages={1-6},
abstract={Transient rotor angle stability after a fault event is a computationally intensive process and performing it for large number of scenarios requires parallelization. To facilitate it, this paper presents a tool that combines scenario modeling, task list creation and dispatcher of parallel processes as a single platform in Python. PowerFactory allows only one instance from a user account in a Windows machine that can modify its database. The proposed approach overcomes this limitation and enable multiple instances from a single machine. It is tested on a single infinite machine equivalent (SIME) method for calculation of critical clearance time (CCT) while assessing the rotor angle stability. This approach leads to the reduction of computational time as a factor of number of parallel instances and significantly improves handling of tasks and aggregation of results. The methodology is generic and can be adopted to any software that provides a Python interface.},
keywords={parallel processing;power engineering computing;power system faults;power system transient stability;Python;rotors;Python based scenario design;parallel simulation method;transient rotor angle stability assessment;PowerFactory;fault event;parallelization;scenario modeling;task list creation;dispatcher;parallel processes;Windows machine;single machine;single infinite machine equivalent method;critical clearance time;computational time;parallel instances;Python interface;Task analysis;Power system stability;Stability criteria;Rotors;Transient analysis;Python;Parallel processing;Stability analysis;Critical clearance time},
doi={10.1109/PTC.2019.8810949},
ISSN={},
month={June},}
@INPROCEEDINGS{8975541,
author={U. {Tiwari} and S. {Mehfuz} and S. {Sharma} and V. T. {Pandey}},
booktitle={2019 International Conference on Power Electronics, Control and Automation (ICPECA)},
title={Design of Python Based Lost and Found Website for College Campus},
year={2019},
volume={},
number={},
pages={1-5},
abstract={Technology, developed over the years, has reduced human efforts significantly. We have used this technology to build a website called “LOSTANDFOUND.COM''. This website is python based. This website will help people to get their lost things. A person using this website has to just put his/her lost thing on the website and the website will find it as soon as possible. HTML, CSS, JAVASCRIPT, BOOTSTRAP, JQUERY, PYTHON, DJANGO and SQLITE are the technologies which we have used in making this website. We have used Django as a framework for Python in this website because it is fast, secure and scalable. The reason we are using Python for this website is because it is simple, powerful and has many libraries. This website also helps people to connect with each other. This website is extremely beneficial for private organizations where employees usually misplace their smartphones, laptop charger, smartphone charger, purse etc.},
keywords={educational institutions;Internet;Python;Web sites;Python;lost and found Website;college campus;Django;lost;found;website;Python},
doi={10.1109/ICPECA47973.2019.8975541},
ISSN={},
month={Nov},}
@INPROCEEDINGS{9092419,
author={H. {Elshazly} and F. {Lordan} and J. {Ejarque} and R. M. {Badia}},
booktitle={2020 28th Euromicro International Conference on Parallel, Distributed and Network-Based Processing (PDP)},
title={Performance Meets Programmabilty: Enabling Native Python MPI Tasks In PyCOMPSs},
year={2020},
volume={},
number={},
pages={63-66},
abstract={The increasing complexity of modern and future computing systems makes it challenging to develop applications that aim for maximum performance. Hybrid parallel programming models offer new ways to exploit the capabilities of the underlying infrastructure. However, the performance gain is sometimes accompanied by increased programming complexity. We introduce an extension to PyCOMPSs, a high-level task-based parallel programming model for Python applications, to support tasks that use MPI natively as part of the task model. Without compromising application's programmability, using Native MPI tasks in PyCOMPSs offers up to 3x improvement in total performance for compute intensive applications and up to 1.9x improvement in total performance for I/O intensive applications over sequential implementation of the tasks.},
keywords={application program interfaces;message passing;parallel programming;Python;PyCOMPSs;computing systems;hybrid parallel programming models;programming complexity;high-level task-based parallel programming model;Python applications;native Python MPI tasks;application programmability;I-O intensive applications;sequential implementation;Task analysis;Parallel processing;Python;Computational modeling;Runtime;Parallel programming;Hybrid Programming Models;Distributed Computing;MPI;High Performance Computing;Task-based Parallel Programming Models;Performance;Productivity},
doi={10.1109/PDP50117.2020.00016},
ISSN={2377-5750},
month={March},}
@INPROCEEDINGS{9163475,
author={V. {Skorpil} and V. {Oujezsky} and M. {Tuleja}},
booktitle={2020 43rd International Conference on Telecommunications and Signal Processing (TSP)},
title={Testing of Python Models of Parallelized Genetic Algorithms},
year={2020},
volume={},
number={},
pages={235-238},
abstract={The paper describes the testing of three models (master slave, fine-grained, and coarse grained) of parallelized genetic algorithms and the comparison of their computational time with each other and with the basic serial model. The analysis of the number of iterations, the load of the main memory and the central processing unit is the subject of other contributions. Corresponding Python modules have been implemented for these models. A test scenario and a test environment were prepared. Testing was realized on a Linux server with the Ubuntu operating system. A RabbitMQ server creating processes by the SCOOP module on the selected workstation was used. Models have been tested by a single-workstation and multi-workstation scenarios. The tested models bring time savings and efficiency improvement compared to the serial model; the fastest was the fine-grained model.},
keywords={genetic algorithms;Linux;parallel algorithms;program testing;Python;central processing unit;Python modules;test scenario;test environment;Linux server;SCOOP module;multiworkstation scenarios;tested models;time savings;efficiency improvement;fine-grained model;Python models;parallelized genetic algorithms;master slave;coarse grained;computational time;basic serial model;RabbitMQ server;Workstations;Computational modeling;Servers;Testing;Sociology;Statistics;Master-slave;coarse-grained;fine-grained;master-slave;model;parallelized genetic algorithm;Python;Ubuntu},
doi={10.1109/TSP49548.2020.9163475},
ISSN={},
month={July},}
@INPROCEEDINGS{8298579,
author={L. {Wang} and L. {Zhang} and Y. {Ma}},
booktitle={2017 First International Conference on Electronics Instrumentation Information Systems (EIIS)},
title={Gstreamer accomplish video capture and coding with PyGI in Python language},
year={2017},
volume={},
number={},
pages={1-4},
abstract={On the one hand, Gstreamer is a framework for creating streaming media applications, and it can process any kind of data flow. On the other hand, GTK+, or the GIMP Toolkit, is a multi-platform toolkit for creating graphical user interfaces. In this paper, the specific packages of Gstreamer which are used for achieve goals in Python language is analyzed. Also, the advantages of Python is introduced. This work is just a try to design streaming media with Gstreamer in Python language. So a Small graphics software which can achieve video capture and coding using Gstreamer will been designed, and the Small graphics software will been wrote in Python language. In the Small graphics software, data flow will been encoded using H.264. Also, GTK will been used to design the graphical interface.},
keywords={graphical user interfaces;image capture;Python;video coding;video streaming;Gstreamer;video capture;Python language;streaming media applications;data flow;GIMP Toolkit;multiplatform toolkit;graphical user interfaces;video coding;Small graphics software;H.264;Streaming media;Encoding;Software;Decoding;Java;Servers;Media;component;Gstreamer1.0;H.264;Python;PyGI},
doi={10.1109/EIIS.2017.8298579},
ISSN={},
month={June},}
@INPROCEEDINGS{9134248,
author={B. {Salihu} and Z. {Tafa}},
booktitle={2020 9th Mediterranean Conference on Embedded Computing (MECO)},
title={On Computational Performances of the Actual Image Classification Methods in C# and Python},
year={2020},
volume={},
number={},
pages={1-5},
abstract={Convolutional Neural Networks (CNNs) built in Python, have become the methodology of choice in image classification. On the other hand, recently formulated Capsule Networks (CapsNets) show potential of deeper understanding of the objects' relations within the images, thereby promising better classification accuracy. The primary aim of this research is to analyze the computational aspects when the two algorithms are implemented in two different programming platforms such as Python and C#. As compared to the equivalent implementations in Python, the results show that C#-based CNN implementation can provide better computational efficiency. Also, C# implementation of CapsNets results in smaller number of epochs for the network to get stabilized, as compared to the Python-based implementation. Finally, at the price of higher computational costs, the results confirm the thesis that, in terms of the handwritten digit classification accuracy, the CapsNets will outperform CNNs.},
keywords={C# language;computational complexity;convolutional neural nets;handwritten character recognition;image classification;Python;CNN implementation;C# implementation;CapsNets;Python-based implementation;handwritten digit classification accuracy;computational performances;actual image classification methods;convolutional neural networks;capsule networks;computational costs;image classification;MNIST;convolutional neural networks;capsule networks;Python;C#},
doi={10.1109/MECO49872.2020.9134248},
ISSN={2637-9511},
month={June},}
@INPROCEEDINGS{8822022,
author={D. M. {Thomas} and S. {Mathur}},
booktitle={2019 3rd International conference on Electronics, Communication and Aerospace Technology (ICECA)},
title={Data Analysis by Web Scraping using Python},
year={2019},
volume={},
number={},
pages={450-454},
abstract={The standard information investigation are built on the root and impact relationship, shaped an example minuscule examination, subjective and quantitative examination, the rationality approach of creating extrapolation examination. The Web Scraper's conniving ethics and procedures are juxtaposed, it explains about the working of how the scraper is premeditated. The technique of it is allocated into three fragments: the web scraper draws the desired links from web, and then the data is extracted to get the data from the source links and finally stowing that data into a csv file. The Python language is implemented for the carrying out. By doing so, linking all these with the moral knowledge of libraries and working know-how, we can have an adequate Scraper in our hand to produce the desired result. Due to an enormous community and library resources for Python and the exquisiteness of coding chic of python language, it is most appropriate one for Scraping desired data from the desired website.},
keywords={data analysis;extrapolation;Internet;Python;data analysis;standard information investigation;rationality approach;extrapolation examination;library resources;Web scraping;CSV file;Python language;Web site;Data mining;Conferences;Python;Business;Crawlers;Databases;Aerospace electronics;Data analysis;Web Scraping;Implementing Web Scrape},
doi={10.1109/ICECA.2019.8822022},
ISSN={},
month={June},}
@INPROCEEDINGS{8993344,
author={R. {Sangpal} and T. {Gawand} and S. {Vaykar} and N. {Madhavi}},
booktitle={2019 2nd International Conference on Intelligent Computing, Instrumentation and Control Technologies (ICICICT)},
title={JARVIS: An interpretation of AIML with integration of gTTS and Python},
year={2019},
volume={1},
number={},
pages={486-489},
abstract={This paper presents JARVIS, a virtual integrated voice assistant comprising of gTTS, AIML[Artificial Intelligence Markup Language], and Python-based state-of-the-art technology in personalized assistant development. JARVIS incorporates the power of AIML and with the industry-leading Google platform for text-to-speech conversion and the voice of the Male Pitch in the gTTS libraries inspired from the Marvel World. This is the result of the adoption of the dynamic base Pythons pyttsx which considers intentionally in adjacent phases of gTTS and AIML, facilitating the establishment of considerably smooth dialogues between the assistant and the users. This is a unique result of the exaggerated contribution of several contributors such as the feasible use of AIML and its dynamic fusion with platforms like Python[pyttsx] and gTTS[Google Text to Speech] resulting into a consistent and modular structure of JARVIS exposing the widespread reusability and negligible maintenance.},
keywords={human computer interaction;interactive systems;natural language processing;Python;search engines;software agents;text analysis;dynamic base Pythons pyttsx;AIML;JARVIS;artificial intelligence markup language;personalized assistant development;industry-leading Google platform;text-to-speech conversion;gTTS libraries;virtual integrated voice assistant;Marvel World;Google text to speech;male pitch;AIML;Python 3.4.7;JARVIS;gTTS;pyttsx;Google API;Tkinter;GTK+;Linux},
doi={10.1109/ICICICT46008.2019.8993344},
ISSN={},
month={July},}
@INPROCEEDINGS{9062830,
author={O. {Toker} and B. {Kuhn}},
booktitle={2019 IEEE Vehicular Networking Conference (VNC)},
title={A Python Based Testbed for Real-Time Testing and Visualization using TI's 77 GHz Automotive Radars},
year={2019},
volume={},
number={},
pages={1-4},
abstract={In the paper, we introduce a Python based software library and a testbed based for TI's 77 GHz automotive radars using the FPGA based hi-speed ethernet link. The main design objective is to be able to test high level algorithms in real-time, show live results with minimal effort, avoid using low speed serial ports, and build the whole system on FPGA based hi-speed communication. All of these are possible using TI's C/C++ toolchain, but may require much more effort, especially for testing high DSP level algorithms. This is true even if all advanced MATLAB and Python DSP libraries are made available in TI's framework. To be able to test different high level algorithms with less effort, TI is providing a closed source Windows application to record raw ADC data for offline analysis in MATLAB. This setup requires a companion Lattice FPGA board, DCA1000, which sends raw ADC data from all receive antennas as UDP packets. However, this setup is useful only for offline analysis. That's why we have implemented a Python based software library and a testbed for real-time testing and visualization using this raw ADC data. Implemented library does all UDP processing, parsing, and returns numpy arrays representing raw ADC data for each receive antenna. A couple of code samples, including a real-time direction of arrival estimation program, are presented to demonstrate the simplicity and usefulness of the developed system.},
keywords={direction-of-arrival estimation;field programmable gate arrays;local area networks;millimetre wave antennas;millimetre wave radar;radar antennas;receiving antennas;road vehicle radar;software libraries;transport protocols;TI 77 GHz automotive radars;real-time direction;implemented library;companion Lattice FPGA board;offline analysis;raw ADC data;different high level algorithms;TI's framework;Python DSP libraries;high DSP level algorithms;hi-speed communication;low speed serial ports;minimal effort;main design objective;hi-speed ethernet link;Python based software library;real-time testing;frequency 77.0 GHz;Chirp;Radar;Automotive engineering;Real-time systems;Field programmable gate arrays;Python;Receiving antennas;Automotive radars;Real-time testing and Visualization;Python},
doi={10.1109/VNC48660.2019.9062830},
ISSN={2157-9865},
month={Dec},}
@INPROCEEDINGS{8816764,
author={A. {Rahman} and E. {Farhana} and N. {Imtiaz}},
booktitle={2019 IEEE/ACM 16th International Conference on Mining Software Repositories (MSR)},
title={Snakes in Paradise?: Insecure Python-Related Coding Practices in Stack Overflow},
year={2019},
volume={},
number={},
pages={200-204},
abstract={Despite being the most popular question and answer website for software developers, answers posted on Stack Overflow (SO) are susceptible to contain Python-related insecure coding practices. A systematic analysis on how frequently insecure coding practices appear in SO answers can help the SO community assess the prevalence of insecure Python code blocks in SO. An insecure coding practice is recurrent use of insecure coding patterns in Python. We conduct an empirical study using 529,054 code blocks collected from Python-related 44,966 answers posted on SO. We observe 7.1% of the 44,966 Python-related answers to include at least one insecure coding practice. The most frequently occurring insecure coding practice is code injection. We observe 9.8% of the 7,444 accepted answers to include at least one insecure code block. We also find user reputation not to relate with the presence of insecure code blocks, suggesting that both high and low-reputed users are likely to introduce insecure code blocks.},
keywords={program diagnostics;Python;question answering (information retrieval);security of data;source code (software);Web sites;Stack Overflow;Python-related insecure coding practices;insecure Python code blocks;insecure coding patterns;code injection;insecure code block;Python-related answers;answer Web site;Encoding;Python;Cryptography;Cross-site scripting;Predictive models;python;reputation;security;stack overflow;coding;practices},
doi={10.1109/MSR.2019.00040},
ISSN={2574-3864},
month={May},}
@INPROCEEDINGS{8787204,
author={M. {Chojnacki} and P. {Sękalski}},
booktitle={2019 MIXDES - 26th International Conference "Mixed Design of Integrated Circuits and Systems"},
title={Stage-oriented, Mixed Design Methodology for Image Processing Using VHDL and Python},
year={2019},
volume={},
number={},
pages={375-378},
abstract={The data analysis could be a very time consuming process during the hardware design on FPGA platforms. The verification process of designed modules is important at each step of a design process. In some cases standard methods for data analysis are insufficient, especially when the data representation are taken into assessment methods. In image processing systems based on FPGA there are various methods to support engineers in development of desired architecture. Some of them are based on scoping hardware signals in running device. It is also possible to scope signals in a simulation environment. In addition there are also high-level abstraction layer of data analysis methods based on Matlab, Python and similar tools. The unique image processing architecture developed by authors could not be upgraded with support of existing co-design methods. This is why stage-oriented, mixed design methodology was performed to support FPGA hardware development for faster prototyping and debugging with Vivado simulator tool and Python language. Presented approach was used to improve image processing design operating with ultra high resolution images (from 5 Mpix up to 70 Mpix).},
keywords={circuit simulation;data analysis;electronic engineering computing;field programmable gate arrays;hardware description languages;image resolution;logic design;program debugging;program verification;Python;image processing architecture;co-design methods;stage-oriented methodology;FPGA hardware development;image processing design;Vivado simulator tool;debugging;ultra high resolution images;Python language;data analysis methods;high-level abstraction layer;image processing systems;data representation;verification process;FPGA platforms;hardware design;mixed design methodology;Image processing;Tools;VHDL;Hardware;Field programmable gate arrays;Analytical models;Matlab;VHDL;FPGA;Python: image processing;simulation;stage},
doi={10.23919/MIXDES.2019.8787204},
ISSN={},
month={June},}
@INPROCEEDINGS{8620048,
author={I. {Grout}},
booktitle={2018 15th International Conference on Electrical Engineering/Electronics, Computer, Telecommunications and Information Technology (ECTI-CON)},
title={Electronic Circuit and System Design using Python and VHDL},
year={2018},
volume={},
number={},
pages={13-16},
abstract={In electronic system design, there is typically a need to develop and simulate descriptions of the design in a suitable language prior to any physical prototyping and production. Common design flows use one or more languages to achieve this. More recently, the use of source-to-source compilers to translate a high-level design description from one language to another has become a requirement and this approach can be seen in applications such as hardware system design using the field programmable gate array (FPGA). In this paper, the role of the Python open-source programming language is considered and the translation of Python based algorithms to hardware descriptions in VHDL is discussed. The paper will discuss the modeling, simulation and translation of design descriptions that are to be implemented within the FPGA targeting sensor input and digital signal processing requirements.},
keywords={digital signal processing chips;field programmable gate arrays;hardware description languages;program compilers;source-to-source compilers;high-level design description;hardware system design;field programmable gate array;Python open-source programming language;Python based algorithms;hardware descriptions;VHDL;electronic system design;electronic circuit;FPGA;digital signal processing requirements;Hardware design languages;Field programmable gate arrays;Python;Hardware;Tools;Electronic circuits;Python;VHDL, compiler, electronic systems},
doi={10.1109/ECTICon.2018.8620048},
ISSN={},
month={July},}
@INPROCEEDINGS{8793309,
author={S. {Poomrittigul} and A. {Koomsubsiri} and P. {Sasithong} and D. {Deenuch} and L. {Wuttisittikulkij}},
booktitle={2019 34th International Technical Conference on Circuits/Systems, Computers and Communications (ITC-CSCC)},
title={The Simulation of Queuing Model for Bangkok Rapid Transit Train Ticket System Using Python},
year={2019},
volume={},
number={},
pages={1-4},
abstract={This paper proposes the simulation model for ticket system of Bangkok rapid transit train. The proposed analysis model is applied by using queuing theory to analyze main queuing delay problem rapid transit train ticket machines. This analysis model has been developed by using python programming language to create software tool for analyzing the existing ticket system comparing with the desire variable condition or redesign the ticket system. Since, proposed software tool use for analyze the effect of existing ticket system by modification to visualize the queuing, delay time, waiting time and etc. The software tool with the simulation model can visualize the 2D animation results and graph for analyzation. The proposed analysis model could be used to any rapid transit train ticket system for impact analysis own existing ticket system.},
keywords={computer animation;data visualisation;graph theory;Python;queueing theory;railway engineering;rapid transit systems;software tools;Python programming language;software tool;queuing delay problem rapid transit train ticket machines;2D animation visualization;graph;Bangkok rapid transit train ticket system;Queueing analysis;Analytical models;Software tools;Delays;Python;Numerical models;Animation;Simulation Model;Queuing Theory;Bangkok rapid transit;train ticket system;software tool},
doi={10.1109/ITC-CSCC.2019.8793309},
ISSN={},
month={June},}
@INPROCEEDINGS{8366371,
author={K. {Lee} and K. {Araki} and O. {Elleuch} and N. {Kojima} and M. {Yamaguchi}},
booktitle={2017 IEEE 44th Photovoltaic Specialist Conference (PVSC)},
title={Pypvcell: An Open-Source Solar Cell Modeling Library in Python},
year={2017},
volume={},
number={},
pages={359-362},
abstract={We announced a open source solar cell modeling and analysis toolkit written in Python. The standard off-the-shelf solar cell simulation software is often difficult to modify or reuse some of its functionality into new solar cell models. In this software package, we wrap the solar cell simulations into individual modules and application programming interfaces to make them very user-friendly. This library contains a wide range of functions to do the heavy-lifting, error-prone jobs of modeling solar cells, such as unit conversions and arithmetic operations of spectrum data, absorption-emission reciprocity or solving the IVs of multi-junction cells. This allows the users to rapidly adapt and build their own models with these modularized and verified components. Source codes, detailed documentation and examples can be found in https://kanhua.github.io/pypvcell.},
keywords={application program interfaces;power engineering computing;Python;software libraries;software packages;software reusability;software tools;solar cells;analysis toolkit;standard off-the-shelf solar cell simulation software;software package;solar cell simulations;individual modules;application programming interfaces;multijunction cells;source codes;open-source solar cell modeling library;Python;Pypvcell;unit conversions;arithmetic operations;spectrum data;absorption-emission reciprocity;Photovoltaic cells;Mathematical model;Object oriented modeling;Numerical models;Computational modeling;Junctions;Python;solar cells;simulation},
doi={10.1109/PVSC.2017.8366371},
ISSN={},
month={June},}
@INPROCEEDINGS{8609394,
author={A. {Boryssenko} and N. {Herscovici}},
booktitle={2018 IEEE International Symposium on Antennas and Propagation USNC/URSI National Radio Science Meeting},
title={Machine Learning for Multiobjective Evolutionary Optimization in Python for EM Problems},
year={2018},
volume={},
number={},
pages={541-542},
abstract={A highly efficient algorithm for the optimization of EM problems is proposed. The algorithm is mostly based on Python open-source libraries and was successfully used in the development of antennas and arrays using HFSS.},
keywords={evolutionary computation;learning (artificial intelligence);optimisation;Python;multiobjective evolutionary optimization;EM problems;Python open-source libraries;Machine Learning;HFSS;antennas;Optimization;Linear programming;Python;Machine learning;Machine learning algorithms;Antenna arrays;Computational modeling;machine learning;surrogate objective function;multiobjective evolutionary algorithm (MOEA);Gaussian process;HFSS},
doi={10.1109/APUSNCURSINRSM.2018.8609394},
ISSN={1947-1491},
month={July},}
@INPROCEEDINGS{8742272,
author={H. {Bingo}},
booktitle={2018 International Conference on Field-Programmable Technology (FPT)},
title={Development of a Control Target Recognition for Autonomous Vehicle Using FPGA with Python},
year={2018},
volume={},
number={},
pages={419-420},
abstract={As an easy development of autonomous driving requiring enormous calculation and electric power, a scheme using FPGA is proposed. To reduce programming effort, a board enabling employment of Python is used, together with high-level libraries. The feasibility of algorithms (white line detection, human detection, etc.) on the FPGA board are investigated.},
keywords={automotive electronics;field programmable gate arrays;object recognition;Python;control target recognition;autonomous vehicle;python;autonomous driving;electric power;high-level libraries;white line detection;human detection;FPGA board;Field programmable gate arrays;Automobiles;Cameras;Autonomous vehicles;Python;Roads;Hardware;PYNQ-Z1;White line detection;Human detection},
doi={10.1109/FPT.2018.00089},
ISSN={},
month={Dec},}
@INPROCEEDINGS{9155908,
author={R. {Abirami} and D. C. J. W. {Wise} and R. {Jeeva} and S. {Sanjay}},
booktitle={2020 International Conference on Electronics and Sustainable Communication Systems (ICESC)},
title={Detecting Security Vulnerabilities in Website using Python},
year={2020},
volume={},
number={},
pages={844-846},
abstract={On the current website, there are many undeniable conditions and there is the existence of new plot holes. If data link is normally extracted on each of the websites, it becomes difficult to evaluate each vulnerability, with tolls such as XS S, SQLI, and other such existing tools for vulnerability assessment. Integrated testing criteria for vulnerabilities are met. In addition, the response should be automated and systematic. The primary value of vulnerability Buffer will be made of predefined and self-formatted code written in python, and the software is automated to send reports to their respective users. The vulnerabilities are tried to be classified as accessible. OWASP is the main resource for developing and validating web security processes.},
keywords={Internet;Python;security of data;Web security processes;vulnerability Buffer;integrated testing criteria;vulnerability assessment;data link;plot holes;undeniable conditions;Python;security vulnerabilities;Tools;Payloads;Python;Security;Conferences;Communication systems;Information technology;Vulnerabilities;Cross site scripting;OWASP},
doi={10.1109/ICESC48915.2020.9155908},
ISSN={},
month={July},}
@INPROCEEDINGS{9150366,
author={T. M. {Low} and D. G. {Spampinato} and S. {McMillan} and M. {Pelletier}},
booktitle={2020 IEEE International Parallel and Distributed Processing Symposium Workshops (IPDPSW)},
title={Linear Algebraic Louvain Method in Python},
year={2020},
volume={},
number={},
pages={223-226},
abstract={We show that a linear algebraic formulation of the Louvain method for community detection can be derived systematically from the linear algebraic definition of modularity. Using the pygraphblas interface, a high-level Python wrapper for the GraphBLAS C Application Programming Interface (API), we demonstrate that the linear algebraic formulation of the Louvain method can be rapidly implemented.},
keywords={application program interfaces;linear algebra;physics computing;Python;linear algebraic Louvain method;linear algebraic formulation;community detection;high-level Python wrapper;GraphBLAS C Application Programming Interface;Productivity;Python;Optimization;Libraries;Clustering algorithms;Distributed processing;Conferences;Louvain Method;Community Detection;Graph Algorithms;GraphBLAS},
doi={10.1109/IPDPSW50202.2020.00050},
ISSN={},
month={May},}
@INPROCEEDINGS{8696867,
author={M. {Brehler} and C. {Mahnke} and S. {Chimmalgi} and S. {Wahls}},
booktitle={2019 Optical Fiber Communications Conference and Exhibition (OFC)},
title={NFDMLab: Simulating Nonlinear Frequency Division Multiplexing in Python},
year={2019},
volume={},
number={},
pages={1-3},
abstract={Fiber-optic transmission based on nonlinear frequency division multiplexing (NFDM) has received much attention in recent years. We introduce NFDMLab, an open source software package for simulating NFDM transmissions written in the Python language.},
keywords={frequency division multiplexing;optical computing;optical fibre communication;Python;software packages;NFDMLab;fiber-optic transmission;open source software package;NFDM transmissions;Python language;nonlinear frequency division multiplexing;Python;Fourier transforms;Frequency division multiplexing;Optical fiber communication;Optical fibers;Fiber nonlinear optics},
doi={},
ISSN={},
month={March},}
@BOOK{9098756,
author={L. A. (. {Harrison}},
booktitle={Introduction to Radar Using Python and MATLAB},
title={Introduction to Radar Using Python and MATLAB},
year={2019},
volume={},
number={},
pages={},
abstract={This comprehensive resource provides readers with the tools necessary to perform analysis of various waveforms for use in radar systems. It provides information about how to produce synthetic aperture (SAR) images by giving a tomographic formulation and implementation for SAR imaging. Tracking filter fundamentals, and each parameter associated with the filter and how each affects tracking performance are also presented. Various radar cross section measurement techniques are covered, along with waveform selection analysis through the study of the ambiguity function for each particular waveform from simple linear frequency modulation (LFM) waveforms to more complicated coded waveforms. The text includes the Python tool suite, which allows the reader to analyze and predict radar performance for various scenarios and applications. Also provided are MATLAB® scripts corresponding to the Python tools. The software includes a user-friendly graphical user interface (GUI) that provides visualizations of the concepts being covered. Users have full access to both the Python and MATLAB source code to modify for their application. With examples using the tool suite are given at the end of each chapter, this text gives readers a clear understanding of how important target scattering is in areas of target detection, target tracking, pulse integration, and target discrimination.},
keywords={},
doi={},
ISSN={},
publisher={Artech},
isbn={9781630815998},
url={https://ieeexplore.ieee.org/document/9098756},}
@INPROCEEDINGS{9054609,
author={S. S. {Sandha} and M. {Aggarwal} and I. {Fedorov} and M. {Srivastava}},
booktitle={ICASSP 2020 - 2020 IEEE International Conference on Acoustics, Speech and Signal Processing (ICASSP)},
title={Mango: A Python Library for Parallel Hyperparameter Tuning},
year={2020},
volume={},
number={},
pages={3987-3991},
abstract={Tuning hyperparameters for machine learning algorithms is a tedious task, one that is typically done manually. To enable automated hyperparameter tuning, recent works have started to use techniques based on Bayesian optimization. However, to practically enable automated tuning for large scale machine learning training pipelines, significant gaps remain in existing libraries, including lack of abstractions, fault tolerance, and flexibility to support scheduling on any distributed computing framework. To address these challenges, we present Mango, a Python library for parallel hyperparameter tuning. Mango enables the use of any distributed scheduling framework, implements intelligent parallel search strategies, and provides rich abstractions for defining complex hyperparameter search spaces that are compatible with scikit-learn. Mango is comparable in performance to Hyperopt [1], another widely used library. Mango is available open-source [2] and is currently used in production at Arm Research to provide state-of-art hyperparameter tuning capabilities.},
keywords={Bayes methods;learning (artificial intelligence);optimisation;parallel processing;Python;scheduling;search problems;software libraries;Mango;Python library;parallel hyperparameter tuning;automated hyperparameter tuning;machine learning;distributed computing;distributed scheduling;complex hyperparameter search spaces;scikit-learn;intelligent parallel search strategies;Bayesian optimization;Hyperparameter tuning;Bayesian optimization;Python library;Parallel Optimizer},
doi={10.1109/ICASSP40776.2020.9054609},
ISSN={2379-190X},
month={May},}
@INPROCEEDINGS{8701890,
author={W. {Hyun} and M. Y. {Huh} and J. {Young Park}},
booktitle={2019 21st International Conference on Advanced Communication Technology (ICACT)},
title={Implementation of greenhouse service control protocol using Python on Raspberry PI},
year={2019},
volume={},
number={},
pages={440-442},
abstract={ICT technology is widely applied to various industries including agriculture. In the agricultural sector, most of the devices and greenhouses still use very old serial communication technologies. Nowadays, many ICT technologies such as ZigBee, Bluetooth and the Internet are spreading but still not interoperable. A set of standards is under development in Korea to ensure interoperability between different vendors. In particular, core interoperability can be provided by standardizing the LCP protocol independent of the underlying network infrastructure. In this paper, we designed service control protocol based on LCP protocol and implemented it using Python. We have deployed the implementation to Raspberry PI with actual physical devices.},
keywords={agriculture;control engineering computing;greenhouses;open systems;protocols;Python;ICT technology;agricultural sector;core interoperability;Python;Raspberry PI;greenhouse service control protocol;serial communication technologies;LCP protocol;Korea;smart greenhouse;Protocols;Actuators;Green products;IP networks;Payloads;Intelligent sensors;smart greenhouse;protocol;implementation;python},
doi={10.23919/ICACT.2019.8701890},
ISSN={1738-9445},
month={Feb},}
@INPROCEEDINGS{9076594,
author={Y. {Wen} and Z. {Jing} and W. {Huan}},
booktitle={2019 International Conference on Meteorology Observations (ICMO)},
title={Application of Python in Weather Radar Standard Base Data},
year={2019},
volume={},
number={},
pages={1-3},
abstract={The application of Weather Radar Standard Base Data Format solves the phenomenon that a variety of basic data file formats coexist in CINRAD Weather Radar for a long time. In business application terminals, only the Standard Base Data Format method is needed to analyze all the Base Data of the CINRAD Weather Radar Base Data. This paper present an analysis of the Weather Radar Standard Base Data, and introduces how to use the Python programming language to perform data reading and other graphical operations on the Weather Radar Standard Base Data format.},
keywords={geophysics computing;meteorological radar;programming languages;Python;Python programming language;data file formats;CINRAD weather radar base data;weather radar standard base data format;Python;Weather Radar;Standard Base Data},
doi={10.1109/ICMO49322.2019.9076594},
ISSN={},
month={Dec},}
